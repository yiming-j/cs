3.1
%rax    0x100
0x104   0xAB
$0x108  0x108
(%rax)  0xFF
4(%rax) 0xAB
9(%rax, %rdx)   0x11
260(%rcx, %rdx) 0x13
0xFC(, %rcx, 4) 0x0xFF
(%rax, %rdx, 4) 0x11

3.2
movl
movw
movb
movb
movq
movw

3.3
寄存器寻址不能用 %ebx
movl 4字节和 %rax 8字节不搭
不能从内存到内存
没有 %sl 寄存器
不能从寄存器到立即数
目标操作数大小不对应
movb 1字节 %si 2字节

3.4
movsbl (%rdi), %eax
movl %eax, (%rsi)

movsbl (%rdi), %eax
movl %eax, (%rsi)

movzbq (%rdi), %rax
movq %rax, (%rsi)

movl (%rdi), %eax
movb %al, (%rsi)

movl (%rdi), %eax
movb %al, (%rsi)

movsbw (%rdi), %ax
movw %ax, (%rsi)

3.5
void decode1(long *xp, long *yp, long *zp) {
    long x = *xp;
    long y = *yp;
    long z = *zp;
    *yp = x;
    *zp = y;
    *xp = z;
}

3.6
6 + x
x + y
x + 4y
7 + 9x
0xA + 4y
9 + x + 2y

3.7
long t = 5 * x + 2* y + 8 * z

3.8
0x100   0x100
0x108   0xA8
0x118   0x110
0x110   0x14
%rcx    0x0
%rax    0xFD

3.9
sal $4 %rax
sar %cl %rax

3.10
long t1 = x | y;
long t2 = t1 >> 3;
long t3 = ~t2;
long t4 = z - t3;

3.11
A. 给寄存器%rdx的值置为0
B. movq $0, %rdx
C. 
xorq %rdx, %rdx 3字节
xorl %edx, %edx 2字节
movq $0, %rdx 7字节
mvol $0, %edx 5字节

3.12
uremdiv:
    movq %rdx, %r8
    movq %rdi, %rax
    movl $0, %edx
    divq %rsi
    movq %rax, (%r8)
    movq %rdx, (%rcx)
    ret

3.13
A. int
B. short
C. unsigned char
D. long, unsigned long, pointer

3.14
A. long
B. short, unsigned short
C. unsigned char
D. int, unsigned

3.15
A. 4003fe
B. 400425
C. 400543 400545
D. 0x400560

3.16
A.
void cond(long a, long *p) {
    if (p) {
        goto done;
    }
    if (*p >= a) {
        goto done;
    }
    *p = a;
    done:
        return;
}

B. 因为汇编代码中有两个比较命令, 对应 && 两侧的两个比较

3.17
A.
long gotodiff_se(long x, long y) {
        long result;
        if (x < y)
            goto true;
        ge_cnt++;
        result = x - y;
        return result;
    true:
        lt_cnt++;
        result = y - x;
        return result;
}
B. 根据实际可能true和false的比例选用，尽量少goto

3.18
long test(long x, long y, long z) {
    long val = x + y + z;
    if (x < -3) {
        if (y < z) {
            val = x * y;
        } else {
            val = y * z;
        }
    } else if (x > 2) {
        val = x * z;
    }
    return val;
}

3.19
A. 30
B. 46

3.20
A. 除
B. 
v = x + 7
x >= 0 ? 
v = x
v >> 3
return 

3.21
long test(long x, long y) {
    long val = 8 * x;
    if (y > 0) {
        if (x < y) {
            val = y - x;
        } else {
            val = x & y;
        }
    } else if (y <= -2) {
        val = x + y;
    }
    return val;
}

3.22
A. 13
B. 20

3.23
A. x: %rdi, y: %rcx, n: %rdx
B. p永远指向x，因此%rax就是p指针
C. 
dw_loop:
    movq    %rdi, %rax  Copy x to %rax
    movq    %rdi, %rcx  Copy x to y (%rcx)
    imulq   %rdi, %rcx  y = x * x
    leaq    (%rdi, %rdi), %rdx  n = 2 * x
.L2:
    leaq    1(%rcx, %rax), %rax x = 1 + y + x
    subq    $1, %rdx    n--
    testq   %rdx, %rdx  n & n
    jg      .L2     if n > 0 goto L2
    rep; ret        return

3.24
long loop_while(long a, long b) {
    long result = 1;
    while (a < b) {
        result = result * (a + b);
        a = a + 1;
    }
    return result;
}

3.25
long loop_while2(long a, long b) {
    long result = b;
    while (b > 0) {
        result = result * a;
        b = b - a;
    }
    return result;
}

3.26
A. jump to middle
B. 
long fun_a(unsigned long x) {
    long val = 0;
    while (x != 0) {
        val = val ^ x;
        x >>= 1;
    }
    return val & 1;
}
C. 计算x中1个数的奇偶，奇数个返回1，偶数个返回0

3.27
long fact_for_guarded_do(long n) {
        long i = 2;
        long result = 1;
        if (n <= 1) {
            goto done;
        }
    loop:
        result *= i;
        i++;
        if (i <= n) {
            goto loop;
        }
    done:
        return result;
}

3.28
A.
long fun_b(unsigned long x) {
    long val = 0;
    long i;
    for (i = 64; i > 0; i--) {
        val = (x & 1) | (2 * val);
        x >>= 1;
    }
    return val;
}

B. i从64到1
C. 翻转x

3.29
A. 没有更新i，无限循环
B. goto update

3.30
A. -1, 0, 1, 2, 4, 5, 7
B. L5, L7

3.31
void switcher(long a, long b, long c, long *dest) {
    long val;
    switch(a) {
        case 5:
            c = b ^ 15;
        case 0:
            val = 112 + c;
            break;
        case 2:
        case 7:
            val = c * b * 2;
            break;
        case 4:
            val = a;
            break;
        default:
            val = b;
    }
    *dest = val;
}

3.32
标号    PC  指令    %rdi    %rsi    %rax    %rsp    *rsp    描述
M1  0x400560    callq   10  -   -   0x7fffffffe820  -   调用first(10)
F1  0x400548    lea     10  -   -   0x7fffffffe818  0x400565    first入口
F2  0x40054c    sub     10  11  -   0x7fffffffe818  0x400565    
F3  0x400550    callq   9   11  -   0x7fffffffe818  0x400565    调用last(9, 11)
L1  0x400540    mov     9   11  -   0x7fffffffe810  0x400555    last入口
L2  0x400543    imul    9   11  9   0x7fffffffe810  0x400555
L3  0x400547    retq    9   11  99  0x7fffffffe810  0x400555    返回first
F4  0x400555    repz retq   9   11  99  0x7fffffff818   0x400565    返回main
M2  0x400565    mov     9   11  99  0x7fffffff820   -   main继续

3.33
a   int   
b   byte  
u   long* 
v   char*

3.34
A. a0 ~ a5
B. a6, a7
C. 只有6个

3.35
A. x
B. 
long rfun(unsigned long x) {
    if (x == 0) {
        return 0;
    }
    unsigned long nx = x >> 2;
    long rv = rfun(nx);
    return rv + x;
}

3.36
S   2   14  2 * i
T   8   24  8 * i
U   8   48  8 * i
V   4   32  4 * i
W   8   32  8 * i

3.37
S + 1   short*  xs + 2  leaq 2(%rdx), %rax
S[3]    short   M[xs + 6]   movw 6(%rdx), %ax
&S[i]   short*  xs + 2i  leaq (%rdx, %rcx, 2), %rax
S[4 * i + 1]    short   M[xs + 8 * i + 2]   movw 2(%rdx, %rcx, 8), %ax
S + i - 5   short*  xs + 2 * i - 10 leaq -10(%rdx, %rcx, 2), %rax

3.38
M = 5
N = 7

3.39

3.40
void fix_set_diag_opt(fix_matrix A, int val) {
    int *Aptr = &A[0][0];
    int result = 0
    do {
        *Aptr = val;
        result += (N + 1);
        Aptr += result;
    } while (Aptr != N * (N + 1));
}

3.41
A.
p: 0
s.x: 8
s.y: 12
next: 16
B. 24
C. 
void sp_init(stuct prob *sp) {
    sp->s.x = sp->s.y;
    sp->p = &(sp->s.x);
    sp->next = sp;
}

3.42
A.
long fun(struct ELE *ptr) {
    long result = 0;
    while (ptr) {
        result += ptr->v;
        ptr = ptr->p;
    }
    return result;
}
B. 单链表，求和

3.43
up->t1.v    short   movw 8(%rdi), %ax  
                    movw %ax, (%rsi)
&up->t1.w   char*   leaq 10(%rdi), %rax

3.44
A. i: 0, c: 4, j: 8, d: 12  16  4;
B. i: 0, c: 4, d: 5, j: 8   16  8;
C. w: 0, c: 6   10  2;
D. w: 0, c: 16  40  8;
E. a: 0, t: 24  40  8;

3.45
A. 0   8   16  24  28  32  40  48
B. 56
D. *a, c, g, e, h, b, d, f 40

3.46
A.
00 00 00 00 00 40 00 76 返回地址
01 23 45 67 89 AB CD EF %rbx

                        %rsp
B. 
00 00 00 00 00 40 00 76 返回地址
01 23 45 67 89 AB CD EF %rbx

C.
D. %rbx
E. 
malloc参数应为 strlen(buf) + 1
检查返回值是否为空

3.47
A. 2^13
B. 2^6

