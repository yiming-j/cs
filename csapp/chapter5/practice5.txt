5.1
*xp = 0

5.2
1: n = 1, 2
2: n = 3, 4, 5, 6, 7
3: n = 8..

5.3
A. 1    91  90  90
B. 91   1   90  90
C. 1    1   90  90

5.4
A. -O1: 临时值，-O2: 累计值
B. 是
C. 不改变

5.5
A. n, 2n
B. 浮点数乘法需要5个周期，有两个计算单元可以并行，对result的更新不影响下一步乘法的进行

5.6
A. n, n
B. 浮点乘法需要5个周期，加法需要3个，且每次更新依赖于上一轮的结果
C. 5.5中的加法和乘法可以同时进行

5.8
A1: 5
A2: 3.33
A3: 2.67
A4: 2.67
A5: 3.33

5.9
while (i1 < n && i2 < n) {
    long v1 = src[i1];
    long v2 = src[i2];
    int flag = v1 < v2;
    dest[id++] = flag == 1 ? src[i1] : src[i2];
    i1 += flag;
    i2 += (1 - flag);
}

5.10
A. 前移1位
B. 后移1位
C. 后移读依赖于上一次的写，读写相关，不能流水线
D. 1.2

5.11
对p[i]的读依赖于上一轮循环对p[i]的写

5.12
储存到一个新的变量中


